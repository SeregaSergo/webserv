error_log logs/error.log;     # optional field (if not: -> "/dev/null")

daemon_mode;                  # optional field (if not: server runs as terminal-interactive process)

# There are to types of clients: with keep-alive connection and without.
# There is a problem of detection of dead connections (they can 
# reserve server resources). And this problem is solving depends on type of 
# connection: with keep-alive or without.
# Connections with keep-alive solve this problem on TCP level. You don't need
# to worry about this. Connections without KA are considered dead if there is no
# acts from client for idle_timeout time (client will be discarded by server)
# https://www.nginx.com/blog/http-keepalives-and-web-performance/
idle_timeout 5;               # optional field (if not: timeout = 10 sec)

# Timeout for keep-alive connections. Server will close connections after this time
# and after responding to the current request.
keepalive_timeout 30;         # optional field (if not: timeout = 24h)

# Keep-alive parameters. Optional.
# You can use one of them (default settings of your OS).
# https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html
tcp_keepalive_time 300;        # after this time TCP will check connection (sec)
tcp_keepalive_probes 3;        # how many probes will be sended to check connection
tcp_keepalive_intvl 20;        # time iterval between two probes (sec)


# MIME types see this links:
# https://developer.mozilla.org/ru/docs/Web/HTTP/Basics_of_HTTP/MIME_types
# https://developer.mozilla.org/ru/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
# optional field (if not: type = "application/octet-stream")
types {
  text/html                             html htm shtml;
  text/css                              css;
  image/gif                             gif;
  image/jpeg                            jpeg jpg;
  application/x-x509-ca-cert            der pem crt;
  application/zip                       zip;
  application/octet-stream              deb bin exe dll dmg eot iso img;
  audio/mpeg                            mp3;
  video/mpeg                            mpeg mpg mov avi;
};

# Could be several servers, at least one
server {
	server_name suzumaki.org www.suzumaki.org;  # optional field
  listen 127.0.0.0:8080;                      # host is optional(if none: any host), port is mandatory
  access_log  logs/access.log;                # optional field (if not: fd1 -> "/dev/null")
  client_max_body_size 5M;                    # optional field (if not: no limit)
  root /Users/bswag/Desktop/;                 # optional field (if not: "")
  error_page 500 503 504 /custom_50x.html;    # optional field (could be several)
  error_page 404 /custom_404.html;
  
  # Could be several locations, at least one.
  # There are 3 types of location with different priorities (from high to low):
  # 1. = means an exact match of uri and location path
  # 2. ~ search by extension
  # 3.   partial match of path (searching starts from begining)
  location / {
      root      /data/www/                    # works as alias in nginx
      index     index.html index.php;         # gives one of these files if location ends with "/"
  };
  
	location /images/ {
      root /data/www/suzumaki/img/;
  };
  
  location /fetch/ {
      allowed_methods   GET;                  # Disables methods (as default: allow everything)
      autoindex     on;                       # https://www.keycdn.com/support/nginx-directory-index
  };

  location = /index.php {
      root /data/www/suzumaki/index.php;
  };

  location ~ php,py {
      root /data/www/suzumaki/cgi-bin/;
  };
};

server {

  listen 127.0.0.0:8080;
  server_name bswag.ru www.bswag.ru;
  
  location / {
        redirect 301 http://suzumaki.org$uri;    # redirections with parsing
  };
};
